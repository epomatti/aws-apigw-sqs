terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
    }
  }
}

provider "aws" {
  region = var.aws_region
}

data "aws_caller_identity" "current" {}

locals {
  aws_account_id = data.aws_caller_identity.current.account_id
}

### DynamoDB ###
resource "aws_dynamodb_table" "accounts" {
  name         = "Accounts"
  billing_mode = "PAY_PER_REQUEST"
  hash_key     = "Id"
  range_key    = "Email"

  stream_enabled   = true
  stream_view_type = "NEW_IMAGE"

  attribute {
    name = "Id"
    type = "S"
  }

  attribute {
    name = "Email"
    type = "S"
  }
}

### Lambda ###

resource "aws_iam_role" "lambda" {
  name = "custom-lambda-invocation-dynamodb"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Sid    = ""
        Principal = {
          Service = "lambda.amazonaws.com"
        }
      },
    ]
  })
}

resource "aws_iam_role_policy_attachment" "lambdainvocation_dynamodb" {
  role       = aws_iam_role.lambda.name
  policy_arn = "arn:aws:iam::aws:policy/AWSLambdaInvocation-DynamoDB"
}

resource "aws_iam_role_policy_attachment" "s3_full_access" {
  role       = aws_iam_role.lambda.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonS3FullAccess"
}

resource "aws_iam_role_policy_attachment" "ses" {
  role       = aws_iam_role.lambda.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonSESFullAccess"
}

resource "aws_iam_role_policy_attachment" "lambda_basic_exec" {
  role       = aws_iam_role.lambda.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
}

### Lambda ###

locals {
  zip = "${path.module}/lambda.zip"
}

resource "aws_lambda_function" "accounts" {
  filename         = local.zip
  function_name    = "function-dynamodb-stream"
  role             = aws_iam_role.lambda.arn
  handler          = "app.lambda_handler"
  source_code_hash = filebase64sha256(local.zip)
  runtime          = "python3.10"

  memory_size = 128
  timeout     = 10

  environment {
    variables = {
      SES_FROM_EMAIL = var.ses_from_email
      SES_TO_ADDRESS = var.ses_to_address
    }
  }

  lifecycle {
    ignore_changes = [
      source_code_hash
    ]
  }
}

resource "aws_lambda_event_source_mapping" "accounts" {
  event_source_arn  = aws_dynamodb_table.accounts.stream_arn
  function_name     = aws_lambda_function.accounts.arn
  starting_position = "LATEST"
}

### S3 ###

resource "random_string" "bucket" {
  length    = 10
  min_lower = 10
  special   = false
}

resource "aws_s3_bucket" "main" {
  bucket = "bucket-dynamodbstream-${random_string.bucket.result}"

  # For development purposes
  force_destroy = true
}

resource "aws_s3_bucket_public_access_block" "main" {
  bucket = aws_s3_bucket.main.id

  block_public_acls       = true
  block_public_policy     = true
  ignore_public_acls      = true
  restrict_public_buckets = true
}
